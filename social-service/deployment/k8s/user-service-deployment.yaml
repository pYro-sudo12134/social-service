apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: social-network-users
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
      version: blue
  template:
    metadata:
      labels:
        app: user-service
        version: blue
    spec:
      serviceAccountName: user-service-sa
      containers:
        - name: user-service
          image: user-service:latest
          ports:
            - containerPort: 8081
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          env:
            - name: SPRING_R2DBC_URL
              value: "r2dbc:postgresql://postgres.social-network-db:5432/spring_microservice_course_db"
            - name: SPRING_DATA_REDIS_HOST
              value: "redis.social-network-db"
            - name: SPRING_R2DBC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: username
            - name: SPRING_R2DBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password
            - name: SPRING_DATA_REDIS_PORT
              value: "6379"
            - name: SPRING_DATA_REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-credentials
                  key: password
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8081
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: social-network-users
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8081"
    prometheus.io/path: "/actuator/prometheus"
    prometheus.io/scheme: "http"
spec:
  selector:
    app: user-service
    version: blue
  ports:
    - port: 8081
      targetPort: 8081