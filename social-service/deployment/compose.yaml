version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-spring_microservice_course_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  user-service:
    build: k8s
    ports:
      - "${APP_PORT:8082}:8082"
    environment:
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/${POSTGRES_DB:-spring_microservice_course_db}
      - SPRING_R2DBC_USERNAME=${POSTGRES_USER:-postgres}
      - SPRING_R2DBC_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB:-spring_microservice_course_db}
      - SPRING_DATA_REDIS_HOST=redis
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:6.2.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - app-network

  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    networks:
      - app-network

  comment-like-service:
    build: ./comment-like-service
    ports:
      - "${COMMENT_LIKE_SERVICE_PORT}:8082"
    environment:
      - SPRING_R2DBC_URL=r2dbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - SPRING_R2DBC_USERNAME=${POSTGRES_USER}
      - SPRING_R2DBC_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - SPRING_DATA_REDIS_HOST=${REDIS_HOST}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - app-network

  mongodb:
    image: mongo:6.0
    container_name: mongodb
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network

  activity-service:
    build:
      context: ./activity-service
      dockerfile: Dockerfile
    ports:
      - "${ACTIVITY_SERVICE_PORT}:8085"
    environment:
      - SPRING_DATA_MONGODB_URI=${MONGO_URI}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      - comment-like-service
      - mongodb
      - kafka
    networks:
      - app-network

  localstack:
    image: localstack/localstack:latest
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3
      - AWS_DEFAULT_REGION=us-east-1
      - EDGE_PORT=4566
      - DEBUG=1
    volumes:
      - localstack_data:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app-network

  image-service:
    build: k8s
    ports:
      - "8082:8082"
    environment:
      - SPRING_R2DBC_URL=${SPRING_R2DBC_URL}
      - SPRING_R2DBC_USERNAME=${SPRING_R2DBC_USERNAME}
      - SPRING_R2DBC_PASSWORD=${SPRING_R2DBC_PASSWORD}
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
      - SPRING_DATA_REDIS_HOST=${SPRING_DATA_REDIS_HOST}
      - SPRING_CLOUD_AWS_S3_ENDPOINT=${SPRING_CLOUD_AWS_S3_ENDPOINT}
      - SPRING_CLOUD_AWS_CREDENTIALS_ACCESS_KEY=${SPRING_CLOUD_AWS_CREDENTIALS_ACCESS_KEY}
      - SPRING_CLOUD_AWS_CREDENTIALS_SECRET_KEY=${SPRING_CLOUD_AWS_CREDENTIALS_SECRET_KEY}
      - SERVER_PORT=${SERVER_PORT}
    depends_on:
      - postgres
      - redis
      - localstack
    networks:
      - app-network

  api-gateway:
    build: k8s
    ports:
      - "${SERVER_PORT:8080}:8080"
    environment:
      - SERVER_PORT=${SERVER_PORT:8080}
      - SPRING_APPLICATION_NAME=${SPRING_APPLICATION_NAME:api-gateway}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:6379}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL:http://auth-service:8080}
      - USER_SERVICE_URL=${USER_SERVICE_URL:http://user-service:8081}
      - IMAGE_SERVICE_URL=${IMAGE_SERVICE_URL:http://image-service:8082}
      - COMMENT_LIKE_SERVICE_URL=${COMMENT_LIKE_SERVICE_URL:http://comment-like-service:8083}
      - JWT_SECRET=${JWT_SECRET:mySuperSecretKeyForJWTTokenGenerationAndValidationInSpringMicroserviceCourse2025}
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:default}
    depends_on:
      - redis
      - image-service
      - user-service
      - comment-like-service
      - activity-service
    networks:
      - app-network

  frontend:
    build:
      context: k8s
      args:
        VITE_API_BASE_URL: ${AUTH_SERVICE_URL:http://localhost:8080}
    ports:
      - "${SERVER_PORT_FRONT:3000}:3000"
    depends_on:
      - api-gateway
    networks:
      - app-network

volumes:
  postgres_data:
  localstack_data:
  mongodb_data:

networks:
  app-network:
    driver: bridge